
#define INNER_SIZE (p_NR > p_NS ? (p_NR > p_NT ? p_NR : p_NT) : (p_NS > p_NT ? p_NS : p_NT))

@kernel void findpts_local_eval_2(
              dfloat * const out_base,   const dlong out_stride,
        const dlong  * const el_base,    const dlong el_stride,
        const dfloat * const r_base,     const dlong r_stride,
        const dlong pn,
        @restrict const dfloat * const in, const dlong in_stride,
        struct findpts_local_data *fd){

  for(dlong i=0;i<pn;++i;@outer){

    @shared dfloat wtr[p_NR];
    @shared dfloat wts[p_NS];
    @shared dfloat sums[p_NR];

    const dlong el = *CAT(dlong, el, i);
    const dfloat *in_el = in + el*in_stride;

    const dfloat * r = CAT(dfloat, r, i);
    for(dlong j= 0;j<INNER_SIZE;++j;@inner){

      lagrange_eval(wtr, fd->fed.lag_data[0], p_NR, 0, r[0], j);
      lagrange_eval(wts, fd->fed.lag_data[1], p_NS, 0, r[1], j);
    }

    // out[i] = sum_j sum_k wts[j]*wtr[k]*in[j + k*nr]
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<p_NR){
        dfloat sum = 0;
        const dfloat *in_el_j = in_el+j;

        for(dlong k=0;k<p_NS;++k){
          sum += in_el_j[k*p_NR] * wts[k];
        }
        sums[j] = wtr[j]*sum;
      }else{
        sums[j] = 0.0;
      }
    }
    dfloat * out = AT(dfloat, out, i);
// p_NR is assumed to be at most 256
#if p_NR>128
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<128&&j<p_NR-128){
        sums[j] += sums[j+128];
      }
    }
#endif
#if p_NR>64
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<64&&j<p_NR-64){
        sums[j] += sums[j+64];
      }
    }
#endif
#if p_NR>32
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<32&&j<p_NR-32){
        sums[j] += sums[j+32];
      }
    }
#endif
#if p_NR>16
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<16&&j<p_NR-16){
        sums[j] += sums[j+16];
      }
    }
#endif
#if p_NR>8
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<8&&j<p_NR-8){
        sums[j] += sums[j+8];
      }
    }
#endif
#if p_NR>4
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<4&&j<p_NR-4){
        sums[j] += sums[j+4];
      }
    }
#endif
#if p_NR>2
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<2&&j<p_NR-2){
        sums[j] += sums[j+2];
      }
    }
#endif
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j==0){
        if(1<p_NR){
          *out = sums[0] + sums[1];
        }else{
          *out = sums[0];
        }
      }
    }
  }
}

@kernel void findpts_local_eval_3(
              dfloat * const out_base,   const dlong out_stride,
        const dlong  * const el_base,    const dlong el_stride,
        const dfloat * const r_base,     const dlong r_stride,
        const dlong  pn,
        @restrict const dfloat * const in, const dlong in_stride,
        struct findpts_local_data *fd){

  for(dlong i=0;i<pn;++i;@outer){

    @shared dfloat wtr[p_NR];
    @shared dfloat wts[p_NS];
    @shared dfloat wtt[p_NT];
    @shared dfloat sums[p_NR];

    const dlong el = *CAT(dlong, el, i);
    const dfloat *in_el = in + el*in_stride;

    const dfloat * r = CAT(dfloat, r, i);
    for(dlong j=0;j<INNER_SIZE;++j;@inner){

      lagrange_eval(wtr, fd->fed.lag_data[0], p_NR, 0, r[0], j);
      lagrange_eval(wts, fd->fed.lag_data[1], p_NS, 0, r[1], j);
      lagrange_eval(wtt, fd->fed.lag_data[2], p_NT, 0, r[2], j);
    }

    // out[i] = sum_j sum_k sum_l wtr[j]*wts[k]*wtt[l]*in[j + k*nr + l*nr*ns]
    //        = sum_j wtr[j] * sum_k wts[k] * sum_l wtt[l]*in[j + k*nr + l*nr*ns]
    for (dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<p_NR){
        dfloat sum_j = 0;
        const dfloat *in_el_j = in_el+j;
        for(dlong k=0;k<p_NS;++k){
          dfloat sum_k = 0;
          const dfloat *in_el_jk = in_el_j+k*p_NR;

          for(dlong l=0;l<p_NT;++l){
            sum_k += in_el_jk[l*p_NR*p_NS] * wtt[l];
          }
          sum_j += wts[k]*sum_k;
        }
        sums[j] = wtr[j]*sum_j;
      }else{
        sums[j] = 0.0;
      }
    }
    dfloat * out = AT(dfloat, out, i);
// p_NR is assumed to be at most 256
#if p_NR>128
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<128&&j<p_NR-128){
        sums[j] += sums[j+128];
      }
    }
#endif
#if p_NR>64
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<64&&j<p_NR-64){
        sums[j] += sums[j+64];
      }
    }
#endif
#if p_NR>32
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<32&&j<p_NR-32){
        sums[j] += sums[j+32];
      }
    }
#endif
#if p_NR>16
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<16&&j<p_NR-16){
        sums[j] += sums[j+16];
      }
    }
#endif
#if p_NR>8
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<8&&j<p_NR-8){
        sums[j] += sums[j+8];
      }
    }
#endif
#if p_NR>4
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<4&&j<p_NR-4){
        sums[j] += sums[j+4];
      }
    }
#endif
#if p_NR>2
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j<2&&j<p_NR-2){
        sums[j] += sums[j+2];
      }
    }
#endif
    for(dlong j=0;j<INNER_SIZE;++j;@inner){
      if(j==0){
        if(1<p_NR){
          *out = sums[0] + sums[1];
        }else{
          *out = sums[0];
        }
      }
    }
  }
}
