//
// nekRS User Defined File
//
#include <limits.h>
#include <string.h>
#include <stdio.h>
#include <math.h>
#include "udf.hpp"
#include "particle.hpp"

#include "casedata.h"

#define D 3
#define OUT_CHUNK_SIZE 100000 /* chunk size for outputing particles */
#define USE_MPIIO      true

struct gabls_particle_data {
  dfloat v_hist[2][D];
  hlong  id;
  dfloat color;

  gabls_particle_data()
  {
  }

  gabls_particle_data(dfloat v_hist_[2][D], dfloat color_, hlong id_)
  {
    for (int i = 0; i < 2; ++i) {
      for (int j = 0; j < D; ++j) {
        v_hist[i][j] = v_hist_[i][j];
      }
    }
    id = id_;
    color = color_;
  }
};

/* Particle Functions */
void particle_init(particle_set<D,gabls_particle_data>& particles) {

  static hlong gcount = 0; // total # particles emitted

  int mpi_rank = platform_t::getInstance()->comm.mpiRank;
  int mpi_size = platform_t::getInstance()->comm.mpiCommSize;

  // evenly distribute 150^3 particles in (0.0, 4.0)x(0.0, 4.0)x(0.0, 4.0)
  for (int ix = 0; ix < 50; ++ix) {
    for (int iy = 0; iy < 50; ++iy) {
      for (int iz = 0; iz < 50; ++iz) {

        dfloat dx = 4.0/(PART_K+1), dy = 4.0/(PART_M+1), dz = 4.0/(PART_N+1);
        dfloat xp = dx*(ix+1),      yp = dy*(iy+1),      zp = dz*(iz+1);

        if (gcount%mpi_size == mpi_rank) { // Inject particle _only_ on this processor
          particle_set<D,gabls_particle_data>::particle_t particle;

          particle.x[0] = xp;
          particle.x[1] = yp;
          particle.x[2] = zp;
          particle.extra.id = k;
          for (int d = 0; d < D; ++d) {
            particle.extra.v_hist[0][d] = 0.0;
            particle.extra.v_hist[1][d] = 0.0;
          }
//        particle.extra.color = time;    // color by spawning timestep
          particle.extra.color = gcount;  // color by id
//        particle.extra.color = xp;      // color by intial x position

          particles.push(particle);
        }
        ++gcount; // Total count
      }
    }
  }
}


void particle_advect_std(particle_set<D,gabls_particle_data>& particles, int tstep) {

  particles.find();
  particles.migrate();

  dfloat *u1[3];
  u1[0] = new dfloat[D*particle.size()];
  u1[1] = u1[0] + particle.size();
  u1[2] = u1[1] + particle.size();
  occa::memory o_U = particles.nrs->o_U.cast(occa::dtype::get<dfloat>());
  particles.interp_local(o_U, u_occa, D);

  double c1, c2, c3, dt = particles.nrs->dt[0];
  if (tstep == 0) { // AB1
    c1 = 1.0;
    c2 = 0.0;
    c3 = 0.0;
  } else if (tstep == 1) { // AB2
    c1 =  3.0 / 2.0;
    c2 = -1.0 / 2.0;
    c3 =  0.0 / 2.0;
  } else { // AB3
    c1 =  23.0 / 12.0;
    c2 = -16.0 / 12.0;
    c3 =   5.0 / 12.0;
  }

  for (int i = 0; i < particles.size(); ++i) {
    // Update particle position and velocity history
    for (int k=0; k < D; ++k) {
       particles.x[k][i] += dt*(c1*u1[k][i] + c2*particles.extra[i].v_hist[0][k] + c3*particles.extra[i].v_hist[1][k]);
       particles.extra[i].v_hist[0][k] = particles.extra[i].v_hist[1][k];
       particles.extra[i].v_hist[1][k] = u1[k][i];
    }

    // x and z have periodic boundaries
    if (particles.x[0][i] > 4) particles.x[0][i] -= 4;
    if (particles.x[0][i] < 0) particles.x[0][i] += 4;
    if (particles.x[2][i] > 4) particles.x[2][i] -= 4;
    if (particles.x[2][i] < 0) particles.x[2][i] += 4;
  }

  delete[] u_base[0];
}

void particle_out(particle_set<D,gabls_particle_data>& particles)
{
  constexpr dlong entry_len = D+1;

  static dfloat x_temp[USE_MPIIO?0:OUT_CHUNK_SIZE][entry_len];
  static dfloat x_root[USE_MPIIO?0:OUT_CHUNK_SIZE][entry_len];

  static int out_step = 0;
  ++out_step;

  MPI_Comm mpi_comm = platform_t::getInstance()->comm.mpiComm;
  int mpi_rank = platform_t::getInstance()->comm.mpiRank;
  int mpi_size = platform_t::getInstance()->comm.mpiCommSize;
  dlong npart = particles.size();

  char fname[128];
  sprintf(fname, "part%05d.3d", out_step);

  if (USE_MPIIO) {
    constexpr hlong p_size = 18*entry_len;

    hlong p_offset = npart;
    MPI_Exscan(MPI_IN_PLACE, &p_offset, 1, MPI_HLONG, MPI_SUM, mpi_comm);
    hlong file_offset = p_offset*p_size+12;

    MPI_File file_out;
    MPI_File_open(mpi_comm, fname, MPI_MODE_CREATE|MPI_MODE_WRONLY, MPI_INFO_NULL, &file_out);
    if(mpi_rank == 0) {
      MPI_File_write(file_out, "X Y Z Color\n", 12, MPI_CHAR, MPI_STATUS_IGNORE);
    } else {
      MPI_File_seek(file_out, file_offset, MPI_SEEK_SET);
    }

    char *char_buffer = new char[npart*p_size + 1];
    for (dlong ii = 0; ii < npart; ++ii) {
      if(D == 3) {
        sprintf(char_buffer+ii*p_size, "%17.9e %17.9e %17.9e %17.9e\n",
                particles.x[0][ii], particles.x[1][ii], particles.x[2][ii], particles.extra[ii].color);
      } else {
        sprintf(char_buffer+ii*p_size, "%17.9e %17.9e %17.9e\n",
                particles.x[0][ii], particles.x[1][ii], particles.extra[ii].color);
      }
    }
    MPI_File_write_all(file_out, char_buffer, p_size*npart, MPI_CHAR, MPI_STATUS_IGNORE);
    delete [] char_buffer;

    MPI_File_close(&file_out);
  } else {
    std::FILE *file_out;
    if (mpi_rank == 0) {
      file_out = fopen(fname, "w+");
      fprintf(file_out, "X Y Z Color\n");
    }
    hlong l_min = INT_MAX, l_max = INT_MIN, min_points, max_points;
    for (int i = 0; i < npart; ++i) {
      hlong id = particles.extra[i].id;
      if (l_min > id) {
        l_min = id;
      }
      if (l_max < id) {
        l_max = id;
      }
    }
    MPI_Allreduce(&l_min, &min_points, 1, MPI_HLONG, MPI_MIN, mpi_comm);
    MPI_Allreduce(&l_max, &max_points, 1, MPI_HLONG, MPI_MAX, mpi_comm);

    hlong n_active = max_points - min_points + 1;
    dlong npass = n_active / OUT_CHUNK_SIZE;
    if (n_active > npass*OUT_CHUNK_SIZE) ++npass;
    hlong ilast=min_points;

    for (int ipass = 0; ipass < npass; ++ipass) {
      dlong mpart = (dlong)std::min((hlong)OUT_CHUNK_SIZE, max_points - ilast+1);
      hlong i0 = ilast;
      hlong i1 = i0 + mpart;
      ilast = i1;

      memset(&x_temp[0][0], 0, mpart*entry_len*sizeof(dfloat));
      for (int ii=0; ii < npart; ++ii) {
        hlong id = particles.extra[ii].id;
        if (i0 <= id && id < i1) {
          int i = id-i0;
          for (int j = 0; j < D; ++j) {
            x_temp[i][j] = particles.x[j][ii];       // coordinates
          }
          x_temp[i][D] = particles.extra[ii].color;  // color
        }
      }

      MPI_Reduce(&x_temp[0][0], &x_root[0][0], mpart*entry_len, MPI_DFLOAT, MPI_SUM, 0, mpi_comm);
      if (mpi_rank == 0) {
        for (int i = 0; i < mpart; ++i) {
          if(D == 3) {
            fprintf(file_out, " %17.9e %17.9e %17.9e %17.9e\n",
                    x_root[i][0], x_root[i][2], x_root[i][3], x_root[i][4]);
          } else {
            fprintf(file_out, " %17.9e %17.9e %17.9e\n",
                    x_root[i][0], x_root[i][2], x_root[i][3]);
          }
        }
      }
    }
    if (mpi_rank == 0) fclose(file_out);
  }
}

particle_set<D,gabls_particle_data> *particle_data;

void my_particle_generator(nrs_t *nrs, dfloat time, int tstep)
{
  bool ifnewpart;
  // adjust to control when particles are generated
  // every 0.5 seconds //
//static dfloat last_new_time = 0.0;
//ifnewpart = time - last_new_time >= 0.5;
//if(ifnewpart) last_new_time = time;
  // every 100 iterations //
//ifnewpart = tstep % 100 == 0;
  // on the output steps //
//ifnewpart = nrs->isOutputStep;
  // only once at the begining
  ifnewpart = tstep == 0;

  // Only output particles on output steps to ensure particles match the field files
  bool ifoutpart = nrs->isOutputStep;

  if (ifnewpart) particle_init(*particle_data);
  particle_advect_std         (*particle_data, tstep);
  if (ifoutpart) particle_out (*particle_data);
}


/* User Functions */

occa::kernel coriolisKernel;

void userf(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_FU)
{
  mesh_t* mesh = nrs->meshV;
  coriolisKernel(
    mesh->Nlocal,
    nrs->fieldOffset,
    nrs->meshV->o_y,
    nrs->cds->o_S,
    nrs->o_U,
    o_FU);
}


/* UDF Functions */

void UDF_LoadKernels(nrs_t *nrs)
{
  particle_data = new particle_set<D,gabls_particle_data>(nrs, 0);

  occa::properties& kernelInfo = *nrs->kernelInfo;
  setupAide &options = platform->options;

  dfloat cond;
  options.getArgs("SCALAR00 DIFFUSIVITY", cond);
  const dfloat g = 9.81;
  const dfloat omega = 7.2921159e-5;

  kernelInfo["defines/p_fcor"]      = 2*omega*LREF/UREF * sin(NLAT*M_PI/180);
  kernelInfo["defines/p_bcor"]      = 2*omega*LREF/UREF * cos(NLAT*M_PI/180);
  kernelInfo["defines/p_gacc"]      = LREF*g/(UREF*UREF);
  kernelInfo["defines/p_cond"]      = cond;
  kernelInfo["defines/p_TsGrad"]    = ILSTRENGTH * LREF/TREF;
  kernelInfo["defines/p_T0s"]       = TS0/TREF;
  kernelInfo["defines/p_sCoolRate"] = SCR * LREF/TREF/UREF/3600;
  kernelInfo["defines/p_YLEN"]      = YLEN;

  coriolisKernel = udfBuildKernel(nrs, "coriolis");
}

void UDF_Setup(nrs_t *nrs)
{
  udf.uEqnSource = &userf;

  int mpi_rank = platform_t::getInstance()->comm.mpiRank;
  int mpi_size = platform_t::getInstance()->comm.mpiCommSize;
  if (mpi_rank == 0) {
    std::cout << "Particle config: " << PART_K << "x" << PART_M << "x" << PART_N << " particle grid "
                                     << "with " << (USE_MIGRATE ? "migration, " : "")
                                                << (USE_HOST_FINDPTS ? "host" : "OCCA") << " findpts "
                                     << "and, " << (USE_LOCAL_FINDPTS_EVAL ? "local " : "") << (USE_HOST_FINDPTS_EVAL ? "host" : "OCCA") << " findpts_eval" << std::endl;
  }
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  if (USE_HOST_FINDPTS_EVAL || CHECK_ACCURACY) {
    nrs->o_U.copyTo(nrs->U);
  }
  my_particle_generator(nrs, time, tstep);
}
